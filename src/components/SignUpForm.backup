import React, { useState } from "react";
import {
  Form,
  FormGroup,
  Label,
  Input,
  FormFeedback,
  FormText,
  Button
} from "reactstrap";
import axios from "axios";

const SignUpForm = ({ toggle }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [username, setUsername] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [delay, setDelay] = useState(null);
  const [usernameValid, setUsernameValid] = useState(false);

  const handleEmailInput = e => {
    setEmail(e.target.value);
    console.log(email);
  };

  const handleUsernameInput = (e, callback) => {
    let x = { ...e };
    let newDelay = setTimeout(() => handleUsernameCheck(x), 300);
    callback(e.target.value);
    setDelay(newDelay);
    setUsername(e.target.value);
    console.log(username);
  };

  const handleUsernameCheck = e => {
    const newUsername = e.target.value;
    if (newUsername.length >= 6) {
      console.log(newUsername);
      axios
        .get(
          `https://insta.nextacademy.com/api/v1/users/check_name?username=${newUsername}`
        )
        .then(response => {
          if (response.data.valid) {
            setUsernameValid(true);
            console.log(usernameValid);
          } else {
            setUsernameValid(false);
          }
        });
    }
  };

  const handlePasswordInput = e => {
    setPassword(e.target.value);
    console.log(password);
  };

  const handleConfirmPasswordInput = e => {
    setConfirmPassword(e.target.value);
    console.log(confirmPassword);
  };

  const handleSubmit = e => {
    e.preventDefault();
    if (!email || !username || !password || !confirmPassword) return;
    if (password !== confirmPassword) {
      console.log("The passwords do not match!");
    } else {
      console.log(
        `Signed up with email: ${email} and username: ${username} and passwords provided match.`
      );
      toggle();
      axios({
        method: "POST",
        url: "https://insta.nextacademy.com/api/v1/users/",
        data: {
          username: username,
          email: email,
          password: password
        }
      })
        .then(response => {
          console.log(response);
          localStorage.setItem("jwt", response.data.auth_token);
          sessionStorage.setItem("clickCount", 10);
        })
        .catch(error => {
          console.error(error.response); // so that we know what went wrong if the request failed
        });
    }
  };

  return (
    <>
      <Form onSubmit={handleSubmit}>
        <FormGroup>
          <Label for="email">Email</Label>
          <Input
            onChange={handleEmailInput}
            type="email"
            placeholder="Enter email"
          />
          <FormFeedback>Sweet! that name is available</FormFeedback>
          <FormText>Enter a valid Email</FormText>
        </FormGroup>
        <FormGroup>
          <Label for="username">Username</Label>
          <Input
            type="text"
            value={username}
            onChange={e => {
              if (delay) {
                clearTimeout(delay);
              }
              handleUsernameInput(e, setUsername);
            }}
            {...(username.length >= 6
              ? usernameValid
                ? { valid: true }
                : { invalid: true }
              : username.length > 0
              ? { invalid: true }
              : "")}
          />
          <FormFeedback
            {...(username.length >= 6
              ? usernameValid
                ? { valid: true }
                : { invalid: true }
              : { invalid: true })}
          >
            {username.length >= 6
              ? usernameValid
                ? "Sweet, this username is available!"
                : "Sorry, this username is taken!"
              : "Must be minimum 6 characters"}
          </FormFeedback>
          <FormText>Enter a username between 6 and 20 characters</FormText>
        </FormGroup>
        <FormGroup>
          <Label for="password">Password</Label>
          <Input
            onChange={handlePasswordInput}
            type="password"
            placeholder="Password"
          />
          <FormFeedback valid tooltip>
            Sweet! that name is available
          </FormFeedback>
          <FormText>Enter a memorable password</FormText>
        </FormGroup>
        <FormGroup>
          <Label for="confirmPassword">Confirm Password</Label>
          <Input
            onChange={handleConfirmPasswordInput}
            type="password"
            placeholder="Confirm Password"
          />
          <FormFeedback tooltip>Passwords must be the same</FormFeedback>
          <FormText>Example help text that remains unchanged.</FormText>
        </FormGroup>
      </Form>
    </>
  );
};

export default SignUpForm;
